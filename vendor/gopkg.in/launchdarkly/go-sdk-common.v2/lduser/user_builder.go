package lduser

import "gopkg.in/launchdarkly/go-sdk-common.v2/ldvalue"

// NewUser creates a new user identified by the given key.
func NewUser(key string) User {
	return User{key: key}
}

// NewAnonymousUser creates a new anonymous user identified by the given key.
func NewAnonymousUser(key string) User {
	return User{key: key, anonymous: ldvalue.Bool(true)}
}

// UserBuilder is a mutable object that uses the Builder pattern to specify properties for a User.
// This is the preferred method for constructing a User; direct access to User fields will be
// removed in a future version.
//
// Obtain an instance of UserBuilder by calling NewUserBuilder, then call setter methods such as
// Name to specify any additional user properties, then call Build() to construct the User. All of
// the UserBuilder setters return a reference the same builder, so they can be chained together:
//
//     user := NewUserBuilder("user-key").Name("Bob").Email("test@example.com").Build()
//
// Setters for user attributes that can be designated private return the type
// UserBuilderCanMakeAttributePrivate, so you can chain the AsPrivateAttribute method:
//
//     user := NewUserBuilder("user-key").Name("Bob").AsPrivateAttribute().Build() // Name is now private
//
// A UserBuilder should not be accessed by multiple goroutines at once.
type UserBuilder interface {
	// Key changes the unique key for the user being built.
	Key(value string) UserBuilder

	// Secondary sets the secondary key attribute for the user being built.
	//
	// This affects feature flag targeting
	// (https://docs.launchdarkly.com/docs/targeting-users#section-targeting-rules-based-on-user-attributes)
	// as follows: if you have chosen to bucket users by a specific attribute, the secondary key (if set)
	// is used to further distinguish between users who are otherwise identical according to that attribute.
	Secondary(value string) UserBuilderCanMakeAttributePrivate

	// IP sets the IP address attribute for the user being built.
	IP(value string) UserBuilderCanMakeAttributePrivate

	// Country sets the country attribute for the user being built.
	Country(value string) UserBuilderCanMakeAttributePrivate

	// Email sets the email attribute for the user being built.
	Email(value string) UserBuilderCanMakeAttributePrivate

	// FirstName sets the first name attribute for the user being built.
	FirstName(value string) UserBuilderCanMakeAttributePrivate

	// LastName sets the last name attribute for the user being built.
	LastName(value string) UserBuilderCanMakeAttributePrivate

	// Avatar sets the avatar URL attribute for the user being built.
	Avatar(value string) UserBuilderCanMakeAttributePrivate

	// Name sets the full name attribute for the user being built.
	Name(value string) UserBuilderCanMakeAttributePrivate

	// Anonymous sets the anonymous attribute for the user being built.
	//
	// If a user is anonymous, the user key will not appear on your LaunchDarkly dashboard.
	Anonymous(value bool) UserBuilder

	// Custom sets a custom attribute for the user being built.
	//
	//     user := NewUserBuilder("user-key").
	//         Custom("custom-attr-name", ldvalue.String("some-string-value")).AsPrivateAttribute().
	//         Build()
	Custom(attribute string, value ldvalue.Value) UserBuilderCanMakeAttributePrivate

	// Build creates a User from the current UserBuilder properties.
	//
	// The User is independent of the UserBuilder once you have called Build(); modifying the UserBuilder
	// will not affect an already-created User.
	Build() User
}

// UserBuilderCanMakeAttributePrivate is an extension of UserBuilder that allows attributes to be
// made private via the AsPrivateAttribute() method. All UserBuilderCanMakeAttributePrivate setter
// methods are the same as UserBuilder, and apply to the original builder.
//
// UserBuilder setter methods for attributes that can be made private always return this interface.
// See AsPrivateAttribute for details.
type UserBuilderCanMakeAttributePrivate interface {
	UserBuilder

	// AsPrivateAttribute marks the last attribute that was set on this builder as being a private
	// attribute: that is, its value will not be sent to LaunchDarkly.
	//
	// This action only affects analytics events that are generated by this particular user object. To
	// mark some (or all) user attributes as private for all users, use the Config properties
	// PrivateAttributeName and AllAttributesPrivate.
	//
	// Most attributes can be made private, but Key and Anonymous cannot. This is enforced by the
	// compiler, since the builder methods for attributes that can be made private are the only ones
	// that return UserBuilderCanMakeAttributePrivate; therefore, you cannot write an expression like
	// NewUserBuilder("user-key").AsPrivateAttribute().
	//
	// In this example, FirstName and LastName are marked as private, but Country is not:
	//
	//     user := NewUserBuilder("user-key").
	//         FirstName("Pierre").AsPrivateAttribute().
	//         LastName("Menard").AsPrivateAttribute().
	//         Country("ES").
	//         Build()
	AsPrivateAttribute() UserBuilder

	// AsNonPrivateAttribute marks the last attribute that was set on this builder as not being a
	// private attribute: that is, its value will be sent to LaunchDarkly and can appear on the dashboard.
	//
	// This is the opposite of AsPrivateAttribute(), and has no effect unless you have previously called
	// AsPrivateAttribute() for the same attribute on the same user builder. For more details, see
	// AsPrivateAttribute().
	AsNonPrivateAttribute() UserBuilder
}

type userBuilderImpl struct {
	key          string
	secondary    ldvalue.OptionalString
	ip           ldvalue.OptionalString
	country      ldvalue.OptionalString
	email        ldvalue.OptionalString
	firstName    ldvalue.OptionalString
	lastName     ldvalue.OptionalString
	avatar       ldvalue.OptionalString
	name         ldvalue.OptionalString
	anonymous    ldvalue.Value
	custom       ldvalue.ObjectBuilder
	privateAttrs map[UserAttribute]struct{}
}

type userBuilderCanMakeAttributePrivate struct {
	builder   *userBuilderImpl
	attribute UserAttribute
}

// NewUserBuilder constructs a new UserBuilder, specifying the user key.
//
// For authenticated users, the key may be a username or e-mail address. For anonymous users,
// this could be an IP address or session ID.
func NewUserBuilder(key string) UserBuilder {
	return &userBuilderImpl{key: key}
}

// NewUserBuilderFromUser constructs a new UserBuilder, copying all attributes from an existing user. You may
// then call setter methods on the new UserBuilder to modify those attributes.
func NewUserBuilderFromUser(fromUser User) UserBuilder {
	builder := &userBuilderImpl{
		key:       fromUser.key,
		secondary: fromUser.secondary,
		ip:        fromUser.ip,
		country:   fromUser.country,
		email:     fromUser.email,
		firstName: fromUser.firstName,
		lastName:  fromUser.lastName,
		avatar:    fromUser.avatar,
		name:      fromUser.name,
		anonymous: fromUser.anonymous,
	}
	if fromUser.custom.Count() > 0 {
		builder.custom = ldvalue.ObjectBuildWithCapacity(fromUser.custom.Count())
		fromUser.custom.Enumerate(func(index int, key string, value ldvalue.Value) bool {
			builder.custom.Set(key, value)
			return true
		})
	}
	if len(fromUser.privateAttributes) > 0 {
		builder.privateAttrs = make(map[UserAttribute]struct{}, len(fromUser.privateAttributes))
		for name := range fromUser.privateAttributes {
			builder.privateAttrs[name] = struct{}{}
		}
	}
	return builder
}

func (b *userBuilderImpl) canMakeAttributePrivate(attribute UserAttribute) UserBuilderCanMakeAttributePrivate {
	return &userBuilderCanMakeAttributePrivate{builder: b, attribute: attribute}
}

func (b *userBuilderImpl) Key(value string) UserBuilder {
	b.key = value
	return b
}

func (b *userBuilderImpl) Secondary(value string) UserBuilderCanMakeAttributePrivate {
	b.secondary = ldvalue.NewOptionalString(value)
	return b.canMakeAttributePrivate(SecondaryKeyAttribute)
}

func (b *userBuilderImpl) IP(value string) UserBuilderCanMakeAttributePrivate {
	b.ip = ldvalue.NewOptionalString(value)
	return b.canMakeAttributePrivate(IPAttribute)
}

func (b *userBuilderImpl) Country(value string) UserBuilderCanMakeAttributePrivate {
	b.country = ldvalue.NewOptionalString(value)
	return b.canMakeAttributePrivate(CountryAttribute)
}

func (b *userBuilderImpl) Email(value string) UserBuilderCanMakeAttributePrivate {
	b.email = ldvalue.NewOptionalString(value)
	return b.canMakeAttributePrivate(EmailAttribute)
}

func (b *userBuilderImpl) FirstName(value string) UserBuilderCanMakeAttributePrivate {
	b.firstName = ldvalue.NewOptionalString(value)
	return b.canMakeAttributePrivate(FirstNameAttribute)
}

func (b *userBuilderImpl) LastName(value string) UserBuilderCanMakeAttributePrivate {
	b.lastName = ldvalue.NewOptionalString(value)
	return b.canMakeAttributePrivate(LastNameAttribute)
}

func (b *userBuilderImpl) Avatar(value string) UserBuilderCanMakeAttributePrivate {
	b.avatar = ldvalue.NewOptionalString(value)
	return b.canMakeAttributePrivate(AvatarAttribute)
}

func (b *userBuilderImpl) Name(value string) UserBuilderCanMakeAttributePrivate {
	b.name = ldvalue.NewOptionalString(value)
	return b.canMakeAttributePrivate(NameAttribute)
}

func (b *userBuilderImpl) Anonymous(value bool) UserBuilder {
	b.anonymous = ldvalue.Bool(value)
	return b
}

func (b *userBuilderImpl) Custom(attribute string, value ldvalue.Value) UserBuilderCanMakeAttributePrivate {
	if b.custom == nil {
		b.custom = ldvalue.ObjectBuild()
	}
	b.custom.Set(attribute, value)
	return b.canMakeAttributePrivate(UserAttribute(attribute))
}

func (b *userBuilderImpl) Build() User {
	u := User{
		key:       b.key,
		secondary: b.secondary,
		ip:        b.ip,
		country:   b.country,
		email:     b.email,
		firstName: b.firstName,
		lastName:  b.lastName,
		avatar:    b.avatar,
		name:      b.name,
		anonymous: b.anonymous,
	}
	if b.custom != nil {
		u.custom = b.custom.Build()
	}
	if len(b.privateAttrs) > 0 {
		p := make(map[UserAttribute]struct{}, len(b.privateAttrs))
		for key := range b.privateAttrs {
			p[key] = struct{}{}
		}
		u.privateAttributes = p
	}
	return u
}

func (b *userBuilderCanMakeAttributePrivate) AsPrivateAttribute() UserBuilder {
	if b.builder.privateAttrs == nil {
		b.builder.privateAttrs = make(map[UserAttribute]struct{})
	}
	b.builder.privateAttrs[b.attribute] = struct{}{}
	return b.builder
}

func (b *userBuilderCanMakeAttributePrivate) AsNonPrivateAttribute() UserBuilder {
	if b.builder.privateAttrs != nil {
		delete(b.builder.privateAttrs, b.attribute)
	}
	return b.builder
}

func (b *userBuilderCanMakeAttributePrivate) Key(value string) UserBuilder {
	return b.builder.Key(value)
}

func (b *userBuilderCanMakeAttributePrivate) Secondary(value string) UserBuilderCanMakeAttributePrivate {
	return b.builder.Secondary(value)
}

func (b *userBuilderCanMakeAttributePrivate) IP(value string) UserBuilderCanMakeAttributePrivate {
	return b.builder.IP(value)
}

func (b *userBuilderCanMakeAttributePrivate) Country(value string) UserBuilderCanMakeAttributePrivate {
	return b.builder.Country(value)
}

func (b *userBuilderCanMakeAttributePrivate) Email(value string) UserBuilderCanMakeAttributePrivate {
	return b.builder.Email(value)
}

func (b *userBuilderCanMakeAttributePrivate) FirstName(value string) UserBuilderCanMakeAttributePrivate {
	return b.builder.FirstName(value)
}

func (b *userBuilderCanMakeAttributePrivate) LastName(value string) UserBuilderCanMakeAttributePrivate {
	return b.builder.LastName(value)
}

func (b *userBuilderCanMakeAttributePrivate) Avatar(value string) UserBuilderCanMakeAttributePrivate {
	return b.builder.Avatar(value)
}

func (b *userBuilderCanMakeAttributePrivate) Name(value string) UserBuilderCanMakeAttributePrivate {
	return b.builder.Name(value)
}

func (b *userBuilderCanMakeAttributePrivate) Anonymous(value bool) UserBuilder {
	return b.builder.Anonymous(value)
}

func (b *userBuilderCanMakeAttributePrivate) Custom(
	attribute string,
	value ldvalue.Value,
) UserBuilderCanMakeAttributePrivate {
	return b.builder.Custom(attribute, value)
}

func (b *userBuilderCanMakeAttributePrivate) Build() User {
	return b.builder.Build()
}
